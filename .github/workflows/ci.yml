name: Continuous Integration

on:
  push:
    branches:
    - sycl

  pull_request:
    branches:
    - sycl

jobs:
  lint:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/nagagroup/naga-dev:acpp-latest
      options: --user=root

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Clang Format
      shell: bash
      run: sudo sh -c "source /home/gpu-dev/.bashrc; cmake -D CLANG_FORMAT_COMMAND=clang-format -P cmake/clang-format.cmake"

    - name: CMake Format
      shell: bash
      if: always()
      run: sudo sh -c "source /home/gpu-dev/.bashrc; cmake -D CMAKEFORMAT_COMMAND=cmake-format -P cmake/cmake-format.cmake"

    - name: Prettier
      shell: bash
      if: always()
      run: sudo sh -c "source /home/gpu-dev/.bashrc; cmake -P cmake/prettier.cmake"

  test-acpp:
    strategy:
      matrix:
        os: [ubuntu-latest]

        type: [shared, static]

        include:
        - { type: shared, shared: YES }
        - { type: static, shared: NO }

    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/nagagroup/naga-dev:acpp-latest
      options: --user=root

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Install vcpkg + dependencies
      shell: bash
      run: |
        git clone https://github.com/microsoft/vcpkg
        sh vcpkg/bootstrap-vcpkg.sh

    - name: Configure
      shell: bash
      run: sudo sh -c "source /home/gpu-dev/.bashrc; cmake --preset=ci-test-acpp -D BUILD_SHARED_LIBS=${{ matrix.shared }}"

    - name: Build
      shell: bash
      run: sudo sh -c "source /home/gpu-dev/.bashrc; cmake --build build --config Release -j 2"

    - name: Install
      shell: bash
      run: sudo sh -c "source /home/gpu-dev/.bashrc; cmake --install build --config Release --prefix prefix"

    - name: Test
      shell: bash
      working-directory: build
      run: sudo sh -c "source /home/gpu-dev/.bashrc; ctest --output-on-failure --no-tests=error -C Release -j 2"

#  test-llvm-sycl:
#    strategy:
#      matrix:
#        os: [ubuntu-latest]
#
#        type: [shared, static]
#
#        include:
#          - { type: shared, shared: YES }
#          - { type: static, shared: NO }
#
#    runs-on: ${{ matrix.os }}
#    container:
#      image: ghcr.io/nagagroup/naga-dev:llvm-sycl-latest
#      options: --user=root
#
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          submodules: 'true'
#
#      - name: Configure
#        shell: bash
#        run: source /home/gpu-dev/.bashrc; cmake --preset=ci-test-llvm-sycl
#          -D BUILD_SHARED_LIBS=${{ matrix.shared }}
#
#      - name: Build
#        shell: bash
#        run: source /home/gpu-dev/.bashrc; cmake --build build --config Release -j 2
#
#      - name: Install
#        shell: bash
#        run: source /home/gpu-dev/.bashrc; cmake --install build --config Release --prefix prefix
#
#      - name: Test
#        shell: bash
#        working-directory: build
#        run: source /home/gpu-dev/.bashrc; ctest --output-on-failure --no-tests=error -C Release -j 2

  docs:
    # Deploy docs only when builds succeed
    needs: [lint, test-acpp]
#    needs: [lint, test-acpp, test-llvm-sycl]

    runs-on: ubuntu-latest
    container:
      image: ghcr.io/nagagroup/naga-dev:acpp-latest
      options: --user=root

    # To enable, first you have to create an orphaned gh-pages branch:
    #
    #    git switch --orphan gh-pages
    #    git commit --allow-empty -m "Initial commit"
    #    git push -u origin gh-pages
    #
    # Edit the <name> placeholder below to your GitHub name, so this action
    # runs only in your repository and no one else's fork. After these, delete
    # this comment and the last line in the conditional below.
    # If you do not wish to use GitHub Pages for deploying documentation, then
    # simply delete this job similarly to the coverage one.
    if: github.ref == 'refs/heads/sycl'
      && github.event_name == 'push'
      && github.repository_owner == 'nagagroup'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Build docs
      run: sudo sh -c 'source /home/gpu-dev/.bashrc; cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build" -P cmake/docs-ci.cmake'

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/docs/html
